{"version":3,"sources":["hooks/useInfiniteScroll.ts","components/InfiniteScroll.tsx","utils/getSrcSet.ts","components/PhotoDisplay/Backdrop.tsx","components/PhotoDisplay/Overlay/index.tsx","components/PhotoDisplay/index.tsx","components/PhotoGrid/index.tsx","components/Loader/index.tsx","hooks/usePersistedState.ts","api/fetchPhotos.ts","api/constants.ts","hooks/usePhotos.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useInfiniteScroll","hasMore","isLoading","onLoadMore","triggerRef","useRef","observerRef","shouldLoadMore","observeCallback","useCallback","isIntersecting","useEffect","node","current","observer","IntersectionObserver","rootMargin","observe","unobserve","InfiniteScroll","loader","children","ref","getSrcSet","photo","srcSet","url_l","width_l","url_m","width_m","url_s","width_s","Backdrop","className","Overlay","title","ownername","isFavourite","onClick","PhotoDisplay","onFavour","onUnfavour","id","src","alt","getIsFavourite","photoId","favourites","includes","PhotoList","photos","images","map","Loader","viewBox","cx","cy","r","fill","stroke-width","usePersistedState","value","key","useState","persistedValue","localStorage","getItem","JSON","parse","localValue","setLocalValue","setItem","stringify","fetchPhotos","page","a","url","fetch","response","status","Error","json","concatWithoutDuplicates","currentPhotos","incomingPhotos","currentIds","nonDuplicates","filter","concat","usePhotos","currentPage","pagesCount","data","setData","setIsLoading","pages","fetchData","App","setCurrentPage","setFavourites","favouriteId","unfavouriteId","favourite","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3be07b87.chunk.js","sourcesContent":["import { useEffect, useRef, useCallback } from \"react\";\r\n\r\n/**\r\n * Helper hook that implements infinite scroll behavior\r\n * @param hasMore has more results, prevents callback if false\r\n * @param isLoading is loading results, prevents callback if true\r\n * @param onLoadMore callback triggered when ref element becomes visible\r\n * @returns ref to pass to the element that triggers onLoadMore when becomes visible\r\n */\r\nconst useInfiniteScroll = (hasMore: boolean, isLoading: boolean, onLoadMore: () => void) => {\r\n    const triggerRef = useRef<HTMLDivElement>(null);\r\n    const observerRef = useRef<IntersectionObserver>(null) as React.MutableRefObject<IntersectionObserver>;\r\n    const shouldLoadMore = hasMore && !isLoading;\r\n\r\n    const observeCallback = useCallback(([{ isIntersecting }]) => {\r\n        if (!shouldLoadMore || !isIntersecting) {\r\n            return;\r\n        }\r\n\r\n        onLoadMore();\r\n    }, [shouldLoadMore]);\r\n\r\n    useEffect(() => {\r\n        const node = triggerRef.current;\r\n        if (node) {\r\n            const observer = new IntersectionObserver(observeCallback, {\r\n                rootMargin: '500px',\r\n            });\r\n            observer.observe(node);\r\n            observerRef.current = observer;\r\n        }\r\n\r\n        return () => {\r\n            if (node) {\r\n                observerRef.current.unobserve(node);\r\n            }\r\n        }\r\n    }, [observeCallback]);\r\n\r\n    return triggerRef;\r\n};\r\n\r\nexport default useInfiniteScroll;","import React from 'react';\r\nimport useInfiniteScroll from '../hooks/useInfiniteScroll';\r\n\r\ntype Props = {\r\n    hasMore: boolean;\r\n    isLoading: boolean;\r\n    onLoadMore: () => void;\r\n    loader: () => React.ReactNode;\r\n};\r\n\r\nconst InfiniteScroll: React.FC<Props> = ({ hasMore, isLoading, onLoadMore, loader, children }) => {\r\n\r\n    const ref = useInfiniteScroll(hasMore, isLoading, onLoadMore);\r\n\r\n    return (\r\n        <div>\r\n            {children}\r\n            <div ref={ref}>{hasMore && loader()}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfiniteScroll;","import { Photo } from \"../types/Photo\";\r\n\r\nconst getSrcSet = (photo: Photo): string => {\r\n    let srcSet = '';\r\n    if (photo.url_l && photo.width_l) {\r\n        srcSet += `${photo.url_l} ${photo.width_l}w, `;\r\n    }\r\n    if (photo.url_m && photo.width_m) {\r\n        srcSet += `${photo.url_m} ${photo.width_m}w, `;\r\n    }\r\n    srcSet += `${photo.url_s} ${photo.width_s}w, `;\r\n    return srcSet;\r\n};\r\n\r\nexport default getSrcSet;","import './Backdrop.css';\r\n\r\nconst Backdrop: React.FC = () => <div className=\"picture-backdrop\" />;\r\n\r\nexport default Backdrop;","import './Overlay.css';\r\n\r\ntype Props = {\r\n    title: string;\r\n    ownername: string;\r\n    isFavourite: boolean;\r\n    onClick: () => void;\r\n};\r\n\r\nconst Overlay: React.FC<Props> = ({ title, ownername, isFavourite, onClick }) => (\r\n    <div className=\"picture-overlay\">\r\n        <div className=\"description\">\r\n            <h4>{title || 'Untitled'}</h4>\r\n            <hr/>\r\n            <i>{ownername}</i>\r\n        </div>\r\n        <button className={isFavourite ? 'selected' : ''} onClick={onClick}>{isFavourite ? 'Unfavour' : 'Favourite'}</button>\r\n    </div>\r\n);\r\n\r\nexport default Overlay;","import { Photo } from \"../../types/Photo\";\r\nimport getSrcSet from \"../../utils/getSrcSet\";\r\nimport Backdrop from \"./Backdrop\";\r\nimport Overlay from \"./Overlay\";\r\nimport './PhotoDisplay.css';\r\n\r\ntype Props = {\r\n    photo: Photo;\r\n    isFavourite: boolean;\r\n    onFavour: (id: string) => void;\r\n    onUnfavour: (id: string) => void;\r\n};\r\n\r\nconst PhotoDisplay: React.FC<Props> = ({ photo, isFavourite, onFavour, onUnfavour }) => {\r\n    const handleClick = () => {\r\n        isFavourite ? onUnfavour(photo.id) : onFavour(photo.id);\r\n    };\r\n\r\n    const { title, ownername } = photo;\r\n    return (\r\n        <div className=\"photo-display\">\r\n            <Backdrop />\r\n            <Overlay title={title} ownername={ownername} isFavourite={isFavourite} onClick={handleClick} />\r\n            <img srcSet={getSrcSet(photo)} src={photo.url_s} alt={photo.title} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoDisplay;","import { Photo } from \"../../types/Photo\";\r\nimport PhotoDisplay from \"../PhotoDisplay\";\r\nimport './PhotoGrid.css';\r\n\r\ntype Props = {\r\n    photos: Photo[];\r\n    favourites: string[];\r\n    onFavour: (id: string) => void;\r\n    onUnfavour: (id: string) => void;\r\n};\r\n\r\nconst getIsFavourite = (photoId: string, favourites: string[]) => favourites.includes(photoId);\r\n\r\nconst PhotoList: React.FC<Props> = ({ photos, favourites, onFavour, onUnfavour }) => {\r\n\r\n    const images = photos.map(photo => (\r\n      <PhotoDisplay\r\n        key={photo.id}\r\n        photo={photo}\r\n        isFavourite={getIsFavourite(photo.id, favourites)}\r\n        onFavour={onFavour}\r\n        onUnfavour={onUnfavour}\r\n      />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"photo-grid\">\r\n          <div>{images}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoList;","import './Loader.css';\r\n\r\nconst Loader: React.FC = () => (\r\n    <div className=\"loader\">\r\n        <svg className=\"spinner\" viewBox=\"0 0 50 50\">\r\n            <circle className=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\r\n        </svg>\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import React, { useEffect, useState } from \"react\";\r\n\r\nconst usePersistedState = <T extends any>(value: any, key: string): [T, React.Dispatch<React.SetStateAction<T>>] => {\r\n    const [localValue, setLocalValue] = useState(() => {\r\n        const persistedValue = localStorage.getItem(key);\r\n        return persistedValue ? JSON.parse(persistedValue) : value;\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(localValue));\r\n    }, [key, localValue]);\r\n\r\n    return [localValue, setLocalValue];\r\n};\r\n\r\nexport default usePersistedState;","import { FetchPhotosResponse } from \"../types/FetchPhotosResponse\";\r\nimport { API_KEY, API_URL } from \"./constants\";\r\n\r\nexport const fetchPhotos = async (page: number): Promise<FetchPhotosResponse> => {\r\n    const perPage = 20;\r\n    const extras = 'url_s,url_m,url_l,owner_name';\r\n    const url = `${API_URL}/?method=flickr.photos.getRecent&api_key=${API_KEY}&format=json&nojsoncallback=1&extras=${extras}&per_page=${perPage}&page=${page}`;\r\n    \r\n    const response = await fetch(url);\r\n    if (response.status !== 200) {\r\n        throw Error('Something went wrong while fetching pictures');\r\n    }\r\n\r\n    return response.json();\r\n};\r\n","export const API_KEY = '853c45c04a7fda69d4639ce36d98f6da';\r\nexport const API_URL = 'https://www.flickr.com/services/rest';","import { useEffect, useState } from \"react\";\r\nimport { fetchPhotos } from \"../api/fetchPhotos\";\r\nimport { Photo } from \"../types/Photo\";\r\n\r\nconst concatWithoutDuplicates = (currentPhotos: Photo[], incomingPhotos: Photo[]): Photo[] => {\r\n    const currentIds = currentPhotos.map(photo => photo.id);\r\n    const nonDuplicates = incomingPhotos.filter(photo => !currentIds.includes(photo.id));\r\n    return currentPhotos.concat(nonDuplicates);\r\n};\r\n\r\nconst usePhotos = (currentPage: number) => {\r\n    const [data, setData] = useState<{ photos: Photo[], pagesCount: number }>({\r\n        photos: [],\r\n        pagesCount: 0,\r\n    });\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async (page: number) => {\r\n            setIsLoading(true);\r\n            const json = await fetchPhotos(page);\r\n            setData(data => ({\r\n                pagesCount: json.photos.pages,\r\n                photos: concatWithoutDuplicates(data.photos, json.photos.photo),\r\n            }));\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchData(currentPage);\r\n    }, [currentPage]);\r\n\r\n    return {\r\n        isLoading,\r\n        hasMore: currentPage < data.pagesCount,\r\n        photos: data.photos,\r\n    };\r\n};\r\n\r\nexport default usePhotos;","import React, { useState } from 'react';\nimport InfiniteScroll from './components/InfiniteScroll';\nimport PhotoGrid from './components/PhotoGrid';\nimport Loader from './components/Loader';\nimport usePersistedState from './hooks/usePersistedState';\nimport usePhotos from './hooks/usePhotos';\n\nimport './App.css';\n\n\nconst App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [favourites, setFavourites] = usePersistedState<string[]>([], 'favourites');\n\n  const { photos, hasMore, isLoading } = usePhotos(currentPage);\n\n  const handleLoadMore = () => {\n    setCurrentPage(current => current + 1);\n  };\n\n  const handleFavour = (favouriteId: string) => {\n    setFavourites(current => current.concat(favouriteId));\n  };\n\n  const handleUnfavour = (unfavouriteId: string) => {\n    setFavourites(current => current.filter(favourite => favourite !== unfavouriteId));\n  };\n\n  return (\n    <div className=\"main\">\n      <InfiniteScroll\n        onLoadMore={handleLoadMore}\n        loader={() => <Loader />}\n        isLoading={isLoading}\n        hasMore={hasMore}\n      >\n        <PhotoGrid photos={photos} favourites={favourites} onFavour={handleFavour} onUnfavour={handleUnfavour} />\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}